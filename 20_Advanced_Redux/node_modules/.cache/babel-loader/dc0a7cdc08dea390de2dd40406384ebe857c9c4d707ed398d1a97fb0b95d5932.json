{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// const cartSlice = createSlice({\n//     name: 'cart',\n//     initialState: {\n//         items: [],\n//         totalQuantity: 0,\n//     },\n//     reducers: {\n//         addItemToCart(state, action) {\n//             const newItem = action.payload;\n//             const existingItem = state.items.find(item => item.id === newItem.id);\n//             if (!existingItem) {\n//                 state.items.push({\n//                     itemId: newItem.id,\n//                     price: newItem.price,\n//                     quantity: 1,\n//                     totalPrice: newItem.price,\n//                     name: newItem.title\n//                 });\n//             } else {\n//                 existingItem.quantity++;\n//                 existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n//             }\n//         },\n//         removeItemFromCard(state, action) {\n//             const id = action.payload;\n//             const existingItem = state.items.find(item => item.id === id);\n//             if (existingItem.quantity === 1) {\n//                 state.items = state.items.filter(item => item.id !== id);\n//             } else {\n//                 existingItem.quantity--;\n//                 existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n//             }\n//         }\n//     }\n// })\n\n// export const cartActions = cartSlice.actions;\n// export default cartSlice.reducer;\n\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialCartState,\n  reducers: {\n    addItemToCart(state, action) {}\n  }\n});","map":{"version":3,"names":["createSlice","initialCartState","items","totalQuantity","cartSlice","name","initialState","reducers","addItemToCart","state","action"],"sources":["/Users/coding_files/PROJECTS/20_Advanced_Redux/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\n// const cartSlice = createSlice({\n//     name: 'cart',\n//     initialState: {\n//         items: [],\n//         totalQuantity: 0,\n//     },\n//     reducers: {\n//         addItemToCart(state, action) {\n//             const newItem = action.payload;\n//             const existingItem = state.items.find(item => item.id === newItem.id);\n//             if (!existingItem) {\n//                 state.items.push({\n//                     itemId: newItem.id,\n//                     price: newItem.price,\n//                     quantity: 1,\n//                     totalPrice: newItem.price,\n//                     name: newItem.title\n//                 });\n//             } else {\n//                 existingItem.quantity++;\n//                 existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n//             }\n//         },\n//         removeItemFromCard(state, action) {\n//             const id = action.payload;\n//             const existingItem = state.items.find(item => item.id === id);\n//             if (existingItem.quantity === 1) {\n//                 state.items = state.items.filter(item => item.id !== id);\n//             } else {\n//                 existingItem.quantity--;\n//                 existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n//             }\n//         }\n//     }\n// })\n\n// export const cartActions = cartSlice.actions;\n// export default cartSlice.reducer;\n\nconst initialCartState = {\n    items: [],\n    totalQuantity: 0\n}\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: initialCartState,\n    reducers: {\n        addItemToCart(state, action) {\n\n        }\n    }\n})"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAMC,gBAAgB,GAAG;EACrBC,KAAK,EAAE,EAAE;EACTC,aAAa,EAAE;AACnB,CAAC;AAED,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC1BK,IAAI,EAAE,MAAM;EACZC,YAAY,EAAEL,gBAAgB;EAC9BM,QAAQ,EAAE;IACNC,aAAaA,CAACC,KAAK,EAAEC,MAAM,EAAE,CAE7B;EACJ;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}