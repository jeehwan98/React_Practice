{"ast":null,"code":"var _jsxFileName = \"/Users/coding_files/PROJECTS/20_Advanced_Redux/src/App.js\",\n  _s = $RefreshSig$();\nimport { Fragment, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport { cartActions } from './store/myCart';\nimport Notification from './components/UI/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const dispatch = useDispatch();\n  const showMyCart = useSelector(state => state.cart.showMyCart);\n  const cart = useSelector(state => state.cartSlice);\n  const notification = useState(state => state.cartSlice.notification);\n  useEffect(() => {\n    // useEffects allow us to run side effects and run effects when some dependency changes\n    const sendCartData = async () => {\n      dispatch(cartActions.showNotification({\n        status: 'pending',\n        title: 'Sending...',\n        message: 'Sending cart data!'\n      }));\n      const response = fetch('https://react-practice-c0ee8-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed');\n      }\n      // const responseData = await response.json();\n\n      dispatch(cartActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    };\n\n    // since it's returning a Promise, we can use the catch method\n    sendCartData().catch(error => {\n      dispatch(cartActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    });\n  }, [cart, dispatch]); // cart as a dependency array so that this effect function re-executes whenever the cart changes\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [notification && /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [showMyCart && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KHuX5dwq6IC1lyknWCjddBvjfm0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useEffect","useState","useDispatch","useSelector","Cart","Layout","Products","cartActions","Notification","jsxDEV","_jsxDEV","App","_s","dispatch","showMyCart","state","cart","cartSlice","notification","sendCartData","showNotification","status","title","message","response","fetch","method","body","JSON","stringify","ok","Error","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/coding_files/PROJECTS/20_Advanced_Redux/src/App.js"],"sourcesContent":["import { Fragment, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport { cartActions } from './store/myCart';\nimport Notification from './components/UI/Notification';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const showMyCart = useSelector(state => state.cart.showMyCart);\n  const cart = useSelector(state => state.cartSlice);\n  const notification = useState(state => state.cartSlice.notification);\n\n  useEffect(() => { // useEffects allow us to run side effects and run effects when some dependency changes\n    const sendCartData = async () => {\n      dispatch(\n        cartActions.showNotification({\n          status: 'pending',\n          title: 'Sending...',\n          message: 'Sending cart data!',\n        })\n      );\n      const response = fetch('https://react-practice-c0ee8-default-rtdb.asia-southeast1.firebasedatabase.app/cart.json',\n        {\n          method: 'PUT',\n          body: JSON.stringify(cart)\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Sending cart data failed');\n      }\n      // const responseData = await response.json();\n\n      dispatch(\n        cartActions.showNotification({\n          status: 'success',\n          title: 'Success!',\n          message: 'Sent cart data successfully!',\n        })\n      );\n    };\n\n    // since it's returning a Promise, we can use the catch method\n    sendCartData().catch(error => {\n      dispatch(\n        cartActions.showNotification({\n          status: 'error',\n          title: 'Error!',\n          message: 'Sending cart data failed!',\n        })\n      );\n    });\n\n  }, [cart, dispatch]); // cart as a dependency array so that this effect function re-executes whenever the cart changes\n\n  return (\n    <Fragment>\n      {notification && <Notification />}\n      <Layout>\n        {showMyCart && <Cart />}\n        <Products />\n      </Layout>\n    </Fragment>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACrD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,YAAY,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAC9B,MAAMY,UAAU,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,IAAI,CAACF,UAAU,CAAC;EAC9D,MAAME,IAAI,GAAGb,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACE,SAAS,CAAC;EAClD,MAAMC,YAAY,GAAGjB,QAAQ,CAACc,KAAK,IAAIA,KAAK,CAACE,SAAS,CAACC,YAAY,CAAC;EAEpElB,SAAS,CAAC,MAAM;IAAE;IAChB,MAAMmB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/BN,QAAQ,CACNN,WAAW,CAACa,gBAAgB,CAAC;QAC3BC,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,YAAY;QACnBC,OAAO,EAAE;MACX,CAAC,CACH,CAAC;MACD,MAAMC,QAAQ,GAAGC,KAAK,CAAC,0FAA0F,EAC/G;QACEC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI;MAC3B,CACF,CAAC;MAED,IAAI,CAACQ,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MACA;;MAEAlB,QAAQ,CACNN,WAAW,CAACa,gBAAgB,CAAC;QAC3BC,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,UAAU;QACjBC,OAAO,EAAE;MACX,CAAC,CACH,CAAC;IACH,CAAC;;IAED;IACAJ,YAAY,CAAC,CAAC,CAACa,KAAK,CAACC,KAAK,IAAI;MAC5BpB,QAAQ,CACNN,WAAW,CAACa,gBAAgB,CAAC;QAC3BC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,QAAQ;QACfC,OAAO,EAAE;MACX,CAAC,CACH,CAAC;IACH,CAAC,CAAC;EAEJ,CAAC,EAAE,CAACP,IAAI,EAAEH,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEtB,oBACEH,OAAA,CAACX,QAAQ;IAAAmC,QAAA,GACNhB,YAAY,iBAAIR,OAAA,CAACF,YAAY;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjC5B,OAAA,CAACL,MAAM;MAAA6B,QAAA,GACJpB,UAAU,iBAAIJ,OAAA,CAACN,IAAI;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvB5B,OAAA,CAACJ,QAAQ;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEf;AAAC1B,EAAA,CA1DQD,GAAG;EAAA,QACOT,WAAW,EACTC,WAAW,EACjBA,WAAW;AAAA;AAAAoC,EAAA,GAHjB5B,GAAG;AA4DZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}