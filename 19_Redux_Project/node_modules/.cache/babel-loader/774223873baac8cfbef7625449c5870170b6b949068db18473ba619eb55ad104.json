{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n/* \n * in redux/toolkit -> we're not overwriting the existing code but instead,\n * clone and create a new state object, keep all the state which we're not editing and override the state which we're editing in an immutable way\n * because of this internally used package\n*/\nconst counterSlice = createSlice({\n  // preparing a slice of our global state\n  name: 'counter',\n  // identifier\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n/* after creating the `createSlice` method, how do we dispatch it? */\n\n// configureStore method: helps us to combine lots of states into one global reducer\nconst store = configureStore({\n  // reducer: { counter: counterSlice.reducer } // this method is used when we have lots of state slices\n  reducer: counterSlice.reducer\n});\nexport default store; // export so that we can use logic outside of this file","map":{"version":3,"names":["createStore","createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","store","reducer"],"sources":["/Users/coding_files/PROJECTS/20_Redux_Project/src/store/index.js"],"sourcesContent":["import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\nconst initialState = { counter: 0, showCounter: true };\n\n/* \n * in redux/toolkit -> we're not overwriting the existing code but instead,\n * clone and create a new state object, keep all the state which we're not editing and override the state which we're editing in an immutable way\n * because of this internally used package\n*/\nconst counterSlice = createSlice({ // preparing a slice of our global state\n    name: 'counter', // identifier\n    initialState: initialState,\n    reducers: {\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.amount;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n})\n\n/* after creating the `createSlice` method, how do we dispatch it? */\n\n// configureStore method: helps us to combine lots of states into one global reducer\nconst store = configureStore({\n    // reducer: { counter: counterSlice.reducer } // this method is used when we have lots of state slices\n    reducer: counterSlice.reducer\n});\n\nexport default store; // export so that we can use logic outside of this file"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAAE;EAC/BM,IAAI,EAAE,SAAS;EAAE;EACjBJ,YAAY,EAAEA,YAAY;EAC1BK,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IACjD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;;AAEF;;AAEA;AACA,MAAMW,KAAK,GAAGd,cAAc,CAAC;EACzB;EACAe,OAAO,EAAEX,YAAY,CAACW;AAC1B,CAAC,CAAC;AAEF,eAAeD,KAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}