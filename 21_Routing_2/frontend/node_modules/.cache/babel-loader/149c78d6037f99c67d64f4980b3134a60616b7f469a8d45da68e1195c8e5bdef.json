{"ast":null,"code":"var _jsxFileName = \"/Users/coding_files/PROJECTS/21_Routing_2/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport { Link, useRouteLoaderData, json, redirect } from 'react-router-dom';\nimport EventItem from '../components/EventItem.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  const data = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nexport async function loader({\n  request,\n  params\n}) {\n  // object contains 2 important pieces 1. request, 2. params\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details for selected event.'\n    }, {\n      status: 500\n    });\n  } else {\n    // const data = await response.json(); // Parse the JSON response\n    // console.log('Fetched data:', data.event);\n    return response;\n  }\n}\n\n// after stating the loader function, we have to state it in the root component, which is the App.js\n\nexport async function action({\n  params,\n  request\n}) {\n  const id = params.eventId;\n  const response = fetch('http://localhost:8080/events/' + id, {\n    method: request.method // logic writthen in `EventItem` component\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete event.'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["Link","useRouteLoaderData","json","redirect","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","request","params","id","eventId","response","fetch","ok","message","status","action","method","$RefreshReg$"],"sources":["/Users/coding_files/PROJECTS/21_Routing_2/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { Link, useRouteLoaderData, json, redirect } from 'react-router-dom';\nimport EventItem from '../components/EventItem.js';\n\nfunction EventDetailPage() {\n    const data = useRouteLoaderData('event-detail');\n\n    return (\n        <>\n            <EventItem event={data.event} />\n            {/* <p>\n                <button>\n                    <Link to='..' relative=\"path\">Back</Link>\n                </button>\n            </p> */}\n        </>\n    )\n}\n\nexport default EventDetailPage;\n\nexport async function loader({ request, params }) { // object contains 2 important pieces 1. request, 2. params\n    const id = params.eventId;\n\n    const response = await fetch('http://localhost:8080/events/' + id);\n\n    if (!response.ok) {\n        throw json({ message: 'Could not fetch details for selected event.' },\n            {\n                status: 500\n            }\n        )\n    } else {\n        // const data = await response.json(); // Parse the JSON response\n        // console.log('Fetched data:', data.event);\n        return response;\n    }\n}\n\n// after stating the loader function, we have to state it in the root component, which is the App.js\n\n\nexport async function action({ params, request }) {\n    const id = params.eventId;\n    const response = fetch('http://localhost:8080/events/' + id, {\n        method: request.method, // logic writthen in `EventItem` component\n    });\n\n    if (!response.ok) {\n        throw json({ message: 'Could not delete event.' },\n            {\n                status: 500\n            }\n        );\n    }\n    return redirect('/events');\n}"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,kBAAkB,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAC3E,OAAOC,SAAS,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAMC,IAAI,GAAGV,kBAAkB,CAAC,cAAc,CAAC;EAE/C,oBACIK,OAAA,CAAAE,SAAA;IAAAI,QAAA,eACIN,OAAA,CAACF,SAAS;MAACS,KAAK,EAAEF,IAAI,CAACE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAMlC,CAAC;AAEX;AAACP,EAAA,CAbQD,eAAe;EAAA,QACPR,kBAAkB;AAAA;AAAAiB,EAAA,GAD1BT,eAAe;AAexB,eAAeA,eAAe;AAE9B,OAAO,eAAeU,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAAE;EAChD,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EAEzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMxB,IAAI,CAAC;MAAEyB,OAAO,EAAE;IAA8C,CAAC,EACjE;MACIC,MAAM,EAAE;IACZ,CACJ,CAAC;EACL,CAAC,MAAM;IACH;IACA;IACA,OAAOJ,QAAQ;EACnB;AACJ;;AAEA;;AAGA,OAAO,eAAeK,MAAMA,CAAC;EAAER,MAAM;EAAED;AAAQ,CAAC,EAAE;EAC9C,MAAME,EAAE,GAAGD,MAAM,CAACE,OAAO;EACzB,MAAMC,QAAQ,GAAGC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,EAAE;IACzDQ,MAAM,EAAEV,OAAO,CAACU,MAAM,CAAE;EAC5B,CAAC,CAAC;EAEF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMxB,IAAI,CAAC;MAAEyB,OAAO,EAAE;IAA0B,CAAC,EAC7C;MACIC,MAAM,EAAE;IACZ,CACJ,CAAC;EACL;EACA,OAAOzB,QAAQ,CAAC,SAAS,CAAC;AAC9B;AAAC,IAAAe,EAAA;AAAAa,YAAA,CAAAb,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}