{"ast":null,"code":"var _jsxFileName = \"/Users/coding_files/PROJECTS/21_Routing_2/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData(); // we will always get the final data that would be yielded by the promise with the help of useLoaderData\n\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 29\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n  // if (data.isError) {\n  //     return <p>{data.message}</p>\n  // }\n  // const events = data.events;\n\n  // return (\n  //     <>\n  //         <EventsList />\n  //     </>\n  // );\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    // return response;\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport function loader() {\n  // get rid of async\n  // bring the code out and create a new function `loadEvents`, just outside of this function\n  // this is done as we don't want to await the promises in the loadEvents function\n  // use `defer();` from react-router-dom\n  return defer({\n    // we pass an object\n    events: loadEvents() // execute the code\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","fallback","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvents","_c","loadEvents","response","fetch","ok","message","status","resData","loader","$RefreshReg$"],"sources":["/Users/coding_files/PROJECTS/21_Routing_2/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\n\nfunction EventsPage() {\n    const { events } = useLoaderData(); // we will always get the final data that would be yielded by the promise with the help of useLoaderData\n\n    return (\n        <Suspense fallback={<p style={{ textAlign: 'center' }}>Loading...</p>}>\n            <Await resolve={events}>\n                {(loadedEvents) => <EventsList events={loadedEvents} />}\n            </Await>\n        </Suspense>\n    )\n    // if (data.isError) {\n    //     return <p>{data.message}</p>\n    // }\n    // const events = data.events;\n\n    // return (\n    //     <>\n    //         <EventsList />\n    //     </>\n    // );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        throw json({ message: 'Could not fetch events.' },\n            {\n                status: 500\n            },\n        );\n    } else {\n        // return response;\n        const resData = await response.json();\n        return resData.events;\n    }\n}\n\nexport function loader() { // get rid of async\n    // bring the code out and create a new function `loadEvents`, just outside of this function\n    // this is done as we don't want to await the promises in the loadEvents function\n    // use `defer();` from react-router-dom\n    return defer({ // we pass an object\n        events: loadEvents(), // execute the code\n    });\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM;IAAEC;EAAO,CAAC,GAAGV,aAAa,CAAC,CAAC,CAAC,CAAC;;EAEpC,oBACIO,OAAA,CAACF,QAAQ;IAACM,QAAQ,eAAEJ,OAAA;MAAGK,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAE;IAAAJ,QAAA,eAClEP,OAAA,CAACJ,KAAK;MAACgB,OAAO,EAAET,MAAO;MAAAI,QAAA,EACjBM,YAAY,iBAAKb,OAAA,CAACH,UAAU;QAACM,MAAM,EAAEU;MAAa;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;EAEf;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;AACJ;AAACT,EAAA,CApBQD,UAAU;EAAA,QACIR,aAAa;AAAA;AAAAqB,EAAA,GAD3Bb,UAAU;AAsBnB,eAAeA,UAAU;AAEzB,eAAec,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMxB,IAAI,CAAC;MAAEyB,OAAO,EAAE;IAA0B,CAAC,EAC7C;MACIC,MAAM,EAAE;IACZ,CACJ,CAAC;EACL,CAAC,MAAM;IACH;IACA,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACtB,IAAI,CAAC,CAAC;IACrC,OAAO2B,OAAO,CAAClB,MAAM;EACzB;AACJ;AAEA,OAAO,SAASmB,MAAMA,CAAA,EAAG;EAAE;EACvB;EACA;EACA;EACA,OAAO3B,KAAK,CAAC;IAAE;IACXQ,MAAM,EAAEY,UAAU,CAAC,CAAC,CAAE;EAC1B,CAAC,CAAC;AACN;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}