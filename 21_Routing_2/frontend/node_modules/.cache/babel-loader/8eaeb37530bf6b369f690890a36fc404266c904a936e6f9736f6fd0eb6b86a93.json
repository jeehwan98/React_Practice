{"ast":null,"code":"var _jsxFileName = \"/Users/coding_files/PROJECTS/21_Routing_2/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData(); // we will always get the final data that would be yielded by the promise with the help of useLoaderData\n\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 12\n  }, this);\n  // if (data.isError) {\n  //     return <p>{data.message}</p>\n  // }\n  // const events = data.events;\n\n  // return (\n  //     <>\n  //         <EventsList />\n  //     </>\n  // );\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch events.'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  // get rid of async\n  // bring the code out and create a new function `loadEvents`, just outside of this function\n  // this is done as we don't want to await the promises in the loadEvents function\n  // use `defer();` from react-router-dom\n  return defer({\n    // we pass an object\n    events: loadEvents() // execute the code\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["/Users/coding_files/PROJECTS/21_Routing_2/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n    const { events } = useLoaderData(); // we will always get the final data that would be yielded by the promise with the help of useLoaderData\n\n    return <Await resolve={events}></Await>\n    // if (data.isError) {\n    //     return <p>{data.message}</p>\n    // }\n    // const events = data.events;\n\n    // return (\n    //     <>\n    //         <EventsList />\n    //     </>\n    // );\n}\n\nexport default EventsPage;\n\nasync function loadEvents() {\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        throw json({ message: 'Could not fetch events.' },\n            {\n                status: 500\n            },\n        );\n    } else {\n        return response;\n    }\n}\n\nexport function loader() { // get rid of async\n    // bring the code out and create a new function `loadEvents`, just outside of this function\n    // this is done as we don't want to await the promises in the loadEvents function\n    // use `defer();` from react-router-dom\n    return defer({ // we pass an object\n        events: loadEvents(), // execute the code\n    });\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM;IAAEC;EAAO,CAAC,GAAGT,aAAa,CAAC,CAAC,CAAC,CAAC;;EAEpC,oBAAOM,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;EACvC;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;AACJ;AAACN,EAAA,CAdQD,UAAU;EAAA,QACIP,aAAa;AAAA;AAAAe,EAAA,GAD3BR,UAAU;AAgBnB,eAAeA,UAAU;AAEzB,eAAeS,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMlB,IAAI,CAAC;MAAEmB,OAAO,EAAE;IAA0B,CAAC,EAC7C;MACIC,MAAM,EAAE;IACZ,CACJ,CAAC;EACL,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,SAASK,MAAMA,CAAA,EAAG;EAAE;EACvB;EACA;EACA;EACA,OAAOpB,KAAK,CAAC;IAAE;IACXO,MAAM,EAAEO,UAAU,CAAC,CAAC,CAAE;EAC1B,CAAC,CAAC;AACN;AAAC,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}