{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// Counter\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\n\n/* \n * in redux/toolkit -> we're not overwriting the existing code but instead,\n * clone and create a new state object, keep all the state which we're not editing and override the state which we're editing in an immutable way\n * because of this internally used package\n*/\nconst counterSlice = createSlice({\n  // preparing a slice of our global state\n  name: 'counter',\n  // identifier\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// Authentication\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authenticationSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState\n});\n\n/* after creating the `createSlice` method, how do we dispatch it? */\n\n// configureStore method: helps us to combine lots of states into one global reducer\nconst store = configureStore({\n  // reducer: { counter: counterSlice.reducer } // this method is used when we have lots of state slices\n  reducer: counterSlice.reducer\n});\nexport const counterActions = counterSlice.actions;\nexport default store; // export so that we can use logic outside of this file","map":{"version":3,"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authenticationSlice","store","reducer","counterActions","actions"],"sources":["/Users/coding_files/PROJECTS/20_Redux_Project/src/store/index.js"],"sourcesContent":["import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// Counter\nconst initialCounterState = {\n    counter: 0,\n    showCounter: true\n};\n\n/* \n * in redux/toolkit -> we're not overwriting the existing code but instead,\n * clone and create a new state object, keep all the state which we're not editing and override the state which we're editing in an immutable way\n * because of this internally used package\n*/\nconst counterSlice = createSlice({ // preparing a slice of our global state\n    name: 'counter', // identifier\n    initialState: initialCounterState,\n    reducers: {\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.payload;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n})\n\n// Authentication\nconst initialAuthState = {\n    isAuthenticated: false\n};\n\nconst authenticationSlice = createSlice({\n    name: 'authentication',\n    initialState: initialAuthState,\n\n});\n\n/* after creating the `createSlice` method, how do we dispatch it? */\n\n// configureStore method: helps us to combine lots of states into one global reducer\nconst store = configureStore({\n    // reducer: { counter: counterSlice.reducer } // this method is used when we have lots of state slices\n    reducer: counterSlice.reducer\n});\n\nexport const counterActions = counterSlice.actions;\n\nexport default store; // export so that we can use logic outside of this file"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;AACA,MAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAAE;EAC/BM,IAAI,EAAE,SAAS;EAAE;EACjBC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMY,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,mBAAmB,GAAGlB,WAAW,CAAC;EACpCM,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAES;AAElB,CAAC,CAAC;;AAEF;;AAEA;AACA,MAAMG,KAAK,GAAGlB,cAAc,CAAC;EACzB;EACAmB,OAAO,EAAEf,YAAY,CAACe;AAC1B,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAGhB,YAAY,CAACiB,OAAO;AAElD,eAAeH,KAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}