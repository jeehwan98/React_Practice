{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n/* after creating the `createSlice` method, how do we dispatch it? */\n\n// configureStore method: helps us to combine lots of states into one global reducer\nconst store = configureStore({\n  reducer: {\n    // store has to have only 1 root reducer\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store; // export so that we can use logic outside of this file","map":{"version":3,"names":["createStore","createSlice","configureStore","store","reducer","counter","counterSlice","auth","authSlice","counterActions","actions","authActions"],"sources":["/Users/coding_files/PROJECTS/20_Redux_Project/src/store/index.js"],"sourcesContent":["import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n/* after creating the `createSlice` method, how do we dispatch it? */\n\n// configureStore method: helps us to combine lots of states into one global reducer\nconst store = configureStore({\n    reducer: { // store has to have only 1 root reducer\n        counter: counterSlice.reducer,\n        auth: authSlice.reducer\n    }\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store; // export so that we can use logic outside of this file"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAE9D;;AAEA;AACA,MAAMC,KAAK,GAAGD,cAAc,CAAC;EACzBE,OAAO,EAAE;IAAE;IACPC,OAAO,EAAEC,YAAY,CAACF,OAAO;IAC7BG,IAAI,EAAEC,SAAS,CAACJ;EACpB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMK,cAAc,GAAGH,YAAY,CAACI,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACE,OAAO;AAE5C,eAAeP,KAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}