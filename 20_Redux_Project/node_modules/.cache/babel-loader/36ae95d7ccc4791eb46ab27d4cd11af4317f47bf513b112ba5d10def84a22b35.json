{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n/* \n * in redux/toolkit -> we're not overwriting the existing code but instead,\n * clone and create a new state object, keep all the state which we're not editing and override the state which we're editing in an immutable way\n * because of this internally used package\n*/\nconst counterSlice = createSlice({\n  // preparing a slice of our global state\n  name: 'counter',\n  // identifier\n  initialState: initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n/* \n * after creating the `createSlice` method, how do we dispatch it?\n * \n * */\n\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'increase') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'toggle') {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n  return state;\n};\n\n// create redux store\nconst store = createStore(counterReducer);\nexport default store; // export so that we can use logic outside of this file\n\n// subscriber function\nconst counterSubscriber = () => {\n  const latestState = store.getState();\n  console.log(latestState);\n};\nconst incrementAction = {\n  type: 'increment'\n};\nconst decrementAction = {\n  type: 'decrement'\n};\n\n// subscribe to store changes\nstore.subscribe(counterSubscriber);\nstore.dispatch(incrementAction);\nstore.dispatch(decrementAction);","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","counterReducer","type","store","counterSubscriber","latestState","getState","console","log","incrementAction","decrementAction","subscribe","dispatch"],"sources":["/Users/coding_files/PROJECTS/20_Redux_Project/src/store/index.js"],"sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = { counter: 0, showCounter: true };\n\n/* \n * in redux/toolkit -> we're not overwriting the existing code but instead,\n * clone and create a new state object, keep all the state which we're not editing and override the state which we're editing in an immutable way\n * because of this internally used package\n*/\nconst counterSlice = createSlice({ // preparing a slice of our global state\n    name: 'counter', // identifier\n    initialState: initialState,\n    reducers: {\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.amount;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n})\n\n/* \n * after creating the `createSlice` method, how do we dispatch it?\n * \n * */\n\nconst counterReducer = (state = initialState, action) => {\n    if (action.type === 'increment') {\n        return {\n            counter: state.counter + 1,\n            showCounter: state.showCounter\n        };\n    }\n\n    if (action.type === 'increase') {\n        return {\n            counter: state.counter + action.amount,\n            showCounter: state.showCounter\n        }\n    }\n\n    if (action.type === 'decrement') {\n        return {\n            counter: state.counter - 1,\n            showCounter: state.showCounter\n        };\n    }\n\n    if (action.type === 'toggle') {\n        return {\n            counter: state.counter,\n            showCounter: !state.showCounter\n        }\n    }\n\n    return state;\n}\n\n// create redux store\nconst store = createStore(counterReducer);\n\nexport default store; // export so that we can use logic outside of this file\n\n// subscriber function\nconst counterSubscriber = () => {\n    const latestState = store.getState();\n    console.log(latestState);\n}\n\nconst incrementAction = { type: 'increment' };\nconst decrementAction = { type: 'decrement' };\n\n// subscribe to store changes\nstore.subscribe(counterSubscriber);\n\nstore.dispatch(incrementAction);\nstore.dispatch(decrementAction);"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAAE;EAC/BK,IAAI,EAAE,SAAS;EAAE;EACjBJ,YAAY,EAAEA,YAAY;EAC1BK,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IACjD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA,MAAMW,cAAc,GAAGA,CAACN,KAAK,GAAGP,YAAY,EAAEU,MAAM,KAAK;EACrD,IAAIA,MAAM,CAACI,IAAI,KAAK,WAAW,EAAE;IAC7B,OAAO;MACHb,OAAO,EAAEM,KAAK,CAACN,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEK,KAAK,CAACL;IACvB,CAAC;EACL;EAEA,IAAIQ,MAAM,CAACI,IAAI,KAAK,UAAU,EAAE;IAC5B,OAAO;MACHb,OAAO,EAAEM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;MACtCT,WAAW,EAAEK,KAAK,CAACL;IACvB,CAAC;EACL;EAEA,IAAIQ,MAAM,CAACI,IAAI,KAAK,WAAW,EAAE;IAC7B,OAAO;MACHb,OAAO,EAAEM,KAAK,CAACN,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEK,KAAK,CAACL;IACvB,CAAC;EACL;EAEA,IAAIQ,MAAM,CAACI,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAO;MACHb,OAAO,EAAEM,KAAK,CAACN,OAAO;MACtBC,WAAW,EAAE,CAACK,KAAK,CAACL;IACxB,CAAC;EACL;EAEA,OAAOK,KAAK;AAChB,CAAC;;AAED;AACA,MAAMQ,KAAK,GAAGjB,WAAW,CAACe,cAAc,CAAC;AAEzC,eAAeE,KAAK,CAAC,CAAC;;AAEtB;AACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC5B,MAAMC,WAAW,GAAGF,KAAK,CAACG,QAAQ,CAAC,CAAC;EACpCC,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;AAC5B,CAAC;AAED,MAAMI,eAAe,GAAG;EAAEP,IAAI,EAAE;AAAY,CAAC;AAC7C,MAAMQ,eAAe,GAAG;EAAER,IAAI,EAAE;AAAY,CAAC;;AAE7C;AACAC,KAAK,CAACQ,SAAS,CAACP,iBAAiB,CAAC;AAElCD,KAAK,CAACS,QAAQ,CAACH,eAAe,CAAC;AAC/BN,KAAK,CAACS,QAAQ,CAACF,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}