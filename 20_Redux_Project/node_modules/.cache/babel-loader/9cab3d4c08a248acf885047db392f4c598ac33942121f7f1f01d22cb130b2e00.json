{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  // preparing a slice of our global state\n  name: 'counter',\n  // identifier\n  initialState: initialState,\n  reducers: {\n    increment() {},\n    decrement() {},\n    increase() {},\n    toggleCounter() {}\n  }\n});\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'increase') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === 'toggle') {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n  return state;\n};\n\n// create redux store\nconst store = createStore(counterReducer);\nexport default store; // export so that we can use logic outside of this file\n\n// subscriber function\nconst counterSubscriber = () => {\n  const latestState = store.getState();\n  console.log(latestState);\n};\nconst incrementAction = {\n  type: 'increment'\n};\nconst decrementAction = {\n  type: 'decrement'\n};\n\n// subscribe to store changes\nstore.subscribe(counterSubscriber);\nstore.dispatch(incrementAction);\nstore.dispatch(decrementAction);","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","decrement","increase","toggleCounter","counterReducer","state","action","type","amount","store","counterSubscriber","latestState","getState","console","log","incrementAction","decrementAction","subscribe","dispatch"],"sources":["/Users/coding_files/PROJECTS/20_Redux_Project/src/store/index.js"],"sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = { counter: 0, showCounter: true };\n\ncreateSlice({ // preparing a slice of our global state\n    name: 'counter', // identifier\n    initialState: initialState,\n    reducers: {\n        increment() { },\n        decrement() { },\n        increase() { },\n        toggleCounter() { }\n    }\n})\n\nconst counterReducer = (state = initialState, action) => {\n    if (action.type === 'increment') {\n        return {\n            counter: state.counter + 1,\n            showCounter: state.showCounter\n        };\n    }\n\n    if (action.type === 'increase') {\n        return {\n            counter: state.counter + action.amount,\n            showCounter: state.showCounter\n        }\n    }\n\n    if (action.type === 'decrement') {\n        return {\n            counter: state.counter - 1,\n            showCounter: state.showCounter\n        };\n    }\n\n    if (action.type === 'toggle') {\n        return {\n            counter: state.counter,\n            showCounter: !state.showCounter\n        }\n    }\n\n    return state;\n}\n\n// create redux store\nconst store = createStore(counterReducer);\n\nexport default store; // export so that we can use logic outside of this file\n\n// subscriber function\nconst counterSubscriber = () => {\n    const latestState = store.getState();\n    console.log(latestState);\n}\n\nconst incrementAction = { type: 'increment' };\nconst decrementAction = { type: 'decrement' };\n\n// subscribe to store changes\nstore.subscribe(counterSubscriber);\n\nstore.dispatch(incrementAction);\nstore.dispatch(decrementAction);"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEtDH,WAAW,CAAC;EAAE;EACVI,IAAI,EAAE,SAAS;EAAE;EACjBH,YAAY,EAAEA,YAAY;EAC1BI,QAAQ,EAAE;IACNC,SAASA,CAAA,EAAG,CAAE,CAAC;IACfC,SAASA,CAAA,EAAG,CAAE,CAAC;IACfC,QAAQA,CAAA,EAAG,CAAE,CAAC;IACdC,aAAaA,CAAA,EAAG,CAAE;EACtB;AACJ,CAAC,CAAC;AAEF,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGV,YAAY,EAAEW,MAAM,KAAK;EACrD,IAAIA,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC7B,OAAO;MACHX,OAAO,EAAES,KAAK,CAACT,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEQ,KAAK,CAACR;IACvB,CAAC;EACL;EAEA,IAAIS,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC5B,OAAO;MACHX,OAAO,EAAES,KAAK,CAACT,OAAO,GAAGU,MAAM,CAACE,MAAM;MACtCX,WAAW,EAAEQ,KAAK,CAACR;IACvB,CAAC;EACL;EAEA,IAAIS,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC7B,OAAO;MACHX,OAAO,EAAES,KAAK,CAACT,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEQ,KAAK,CAACR;IACvB,CAAC;EACL;EAEA,IAAIS,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAO;MACHX,OAAO,EAAES,KAAK,CAACT,OAAO;MACtBC,WAAW,EAAE,CAACQ,KAAK,CAACR;IACxB,CAAC;EACL;EAEA,OAAOQ,KAAK;AAChB,CAAC;;AAED;AACA,MAAMI,KAAK,GAAGhB,WAAW,CAACW,cAAc,CAAC;AAEzC,eAAeK,KAAK,CAAC,CAAC;;AAEtB;AACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAC5B,MAAMC,WAAW,GAAGF,KAAK,CAACG,QAAQ,CAAC,CAAC;EACpCC,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;AAC5B,CAAC;AAED,MAAMI,eAAe,GAAG;EAAER,IAAI,EAAE;AAAY,CAAC;AAC7C,MAAMS,eAAe,GAAG;EAAET,IAAI,EAAE;AAAY,CAAC;;AAE7C;AACAE,KAAK,CAACQ,SAAS,CAACP,iBAAiB,CAAC;AAElCD,KAAK,CAACS,QAAQ,CAACH,eAAe,CAAC;AAC/BN,KAAK,CAACS,QAAQ,CAACF,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}