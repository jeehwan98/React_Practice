{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n// Authentication\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n      console.log('logged in');\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n/* after creating the `createSlice` method, how do we dispatch it? */\n\n// configureStore method: helps us to combine lots of states into one global reducer\nconst store = configureStore({\n  reducer: {\n    // store has to have only 1 root reducer\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store; // export so that we can use logic outside of this file","map":{"version":3,"names":["createStore","createSlice","configureStore","initialAuthState","isAuthenticated","authSlice","name","initialState","reducers","login","state","console","log","logout","store","reducer","counter","counterSlice","auth","counterActions","actions","authActions"],"sources":["/Users/coding_files/PROJECTS/20_Redux_Project/src/store/index.js"],"sourcesContent":["import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\n\n\n\n// Authentication\nconst initialAuthState = {\n    isAuthenticated: false\n};\n\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState: initialAuthState,\n    reducers: {\n        login(state) {\n            state.isAuthenticated = true;\n            console.log('logged in');\n        },\n        logout(state) {\n            state.isAuthenticated = false;\n        }\n    }\n});\n\n/* after creating the `createSlice` method, how do we dispatch it? */\n\n// configureStore method: helps us to combine lots of states into one global reducer\nconst store = configureStore({\n    reducer: { // store has to have only 1 root reducer\n        counter: counterSlice.reducer,\n        auth: authSlice.reducer\n    }\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store; // export so that we can use logic outside of this file"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;;AAI9D;AACA,MAAMC,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC1BK,IAAI,EAAE,gBAAgB;EACtBC,YAAY,EAAEJ,gBAAgB;EAC9BK,QAAQ,EAAE;IACNC,KAAKA,CAACC,KAAK,EAAE;MACTA,KAAK,CAACN,eAAe,GAAG,IAAI;MAC5BO,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC5B,CAAC;IACDC,MAAMA,CAACH,KAAK,EAAE;MACVA,KAAK,CAACN,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAEF;;AAEA;AACA,MAAMU,KAAK,GAAGZ,cAAc,CAAC;EACzBa,OAAO,EAAE;IAAE;IACPC,OAAO,EAAEC,YAAY,CAACF,OAAO;IAC7BG,IAAI,EAAEb,SAAS,CAACU;EACpB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMI,cAAc,GAAGF,YAAY,CAACG,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGhB,SAAS,CAACe,OAAO;AAE5C,eAAeN,KAAK,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}